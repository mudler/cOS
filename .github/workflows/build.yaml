name: Build cOS
on:
  schedule:
    - cron:  '0 20 * * *'
  push:
    paths:
      - 'conf/**'
      - 'packages/**'
      - '.github/**'
      - 'tests/**'
      - 'make/**'
      - 'Makefile'
  pull_request:
    paths:
      - 'conf/**'
      - 'packages/**'
      - 'make/**'
      - '.github/**'
      - 'Makefile'
      - 'tests/**'
  create:
    tags:
      - v*


jobs:
  docker-build:
    concurrency: 
      group: ci-docker-build-dismissable-${{ github.head_ref || github.ref }}-${{ github.repository }}-${{ matrix.flavor }}
      cancel-in-progress: true

    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - flavor: "opensuse"
          - flavor: "fedora"
          - flavor: "ubuntu"
    env:
      FLAVOR: ${{ matrix.flavor }}
    steps:
      - uses: actions/checkout@v2

      - run: |
          git fetch --prune --unshallow

      - name: setup-docker
        uses: docker-practice/actions-setup-docker@master

      - name: Release space from worker
        run: |
          sudo rm -rf /usr/local/lib/android # will release about 10 GB if you don't need Android
          sudo rm -rf /usr/share/dotnet # will release about 20GB if you don't need .NET

      - name: Build  ðŸ”§
        shell: 'script -q -e -c "bash {0}"'
        run: |
          source .envrc
          cos-build $FLAVOR

  build:
    concurrency: 
      group: ci-dismissable-${{ github.head_ref || github.ref }}-${{ github.repository }}-${{ matrix.flavor }}
      cancel-in-progress: true
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - flavor: "opensuse"
          - flavor: "fedora"
          - flavor: "ubuntu"
    env:
      FLAVOR: ${{ matrix.flavor }}
    steps:
      - uses: actions/checkout@v2

      - run: |
          git fetch --prune --unshallow

      - name: setup-docker
        uses: docker-practice/actions-setup-docker@master

      - name: Release space from worker
        run: |
          sudo rm -rf /usr/local/lib/android # will release about 10 GB if you don't need Android
          sudo rm -rf /usr/share/dotnet # will release about 20GB if you don't need .NET

      - name: Login to Quay Registry
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        run: echo ${{ secrets.QUAY_PASSWORD }} | docker login -u ${{ secrets.QUAY_USERNAME }} --password-stdin quay.io
      - name: Set Push options
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        run: echo "BUILD_ARGS=--push --no-spinner --live-output --pull" >> $GITHUB_ENV

      - name: "Set PR options"
        if: ${{ github.event_name == 'pull_request' }}
        run: echo "BUILD_ARGS=--no-spinner --only-target-package --live-output --pull" >> $GITHUB_ENV

      - name: "Set Branches options"
        if: ${{ github.event_name == 'push' && github.ref != 'refs/heads/master' }}
        run: echo "BUILD_ARGS=--no-spinner --only-target-package --live-output --pull" >> $GITHUB_ENV

      - name: Install deps
        run: |
          sudo -E make deps
          sudo -E luet install -y --config .github/.luet.yaml toolchain/luet-mtree

      - name: Validate ðŸŒ³
        run: |
          make validate

      - name: Build packages ðŸ”§
        run: |
          sudo -E make build
          ls -liah $PWD/build
          sudo chmod -R 777 $PWD/build
      - name: Generate manifests
        run: |
          for f in build/*tar*; do
            sudo -E luet mtree -- generate $f -o "$f.mtree"
          done
      - name: Append manifests to metadata
        run: |
          for f in build/*mtree; do
            BASE_NAME=`basename -s .package.tar.zst.mtree $f`
            sudo -E .github/append_manifests.py build/$BASE_NAME.metadata.yaml $f mtree
          done
      - name: Create repo
        run: |
          sudo -E make create-repo
      - name: Upload results
        uses: actions/upload-artifact@v2
        with:
          name: build-${{ matrix.flavor }}
          path: build
          if-no-files-found: error

  iso:
    concurrency: 
      group: ci-dismissable-${{ github.head_ref || github.ref }}-${{ github.repository }}-${{ matrix.flavor }}
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        include:
          - flavor: "opensuse"
    #         - flavor: "fedora"
    #         - flavor: "ubuntu"
    steps:
      - uses: actions/checkout@v2
      - name: Download result for build
        uses: actions/download-artifact@v2
        with:
          name: build-${{ matrix.flavor }}
          path: build
      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y xorriso squashfs-tools
          sudo -E make deps

      - name: Build ISO from local build ðŸ”§
        if: github.event_name != 'schedule' && !startsWith(github.ref, 'refs/tags/')
        run: |
          sudo -E make local-iso

      - name: Build ISO from remote repositories ðŸ”§
        if: github.event_name == 'schedule' || startsWith(github.ref, 'refs/tags/')
        run: |
          sudo -E make iso
      - uses: actions/upload-artifact@v2
        with:
          name: cOS-${{ matrix.flavor }}.iso.zip
          path: |
            *.iso
            *.sha256
          if-no-files-found: error
  qemu:
    concurrency: 
      group: ci-dismissable-${{ github.head_ref || github.ref }}-${{ github.repository }}-${{ matrix.flavor }}
      cancel-in-progress: true
    runs-on: macos-10.15
    needs: iso

    strategy:
      matrix:
        include:
          - flavor: "opensuse"
    #            - flavor: "fedora"
    steps:
      - uses: actions/checkout@v2
      - name: Download ISO
        uses: actions/download-artifact@v2
        with:
          name: cOS-${{ matrix.flavor }}.iso.zip
      - name: Install deps
        run: |
          brew install qemu
      - name: Build QEMU Image ðŸ”§
        run: |
          PACKER_ARGS="-var='accelerator=hvf' -var='feature=vagrant' -only qemu" make packer
      - uses: actions/upload-artifact@v2
        with:
          name: cOS-${{ matrix.flavor }}.qcow
          path: |
            packer/*.tar.gz
          if-no-files-found: error
      - uses: actions/upload-artifact@v2
        with:
          name: cOS-${{ matrix.flavor }}-QEMU.box
          path: |
            packer/*.box
          if-no-files-found: error
  vbox:
    concurrency: 
      group: ci-dismissable-${{ github.head_ref || github.ref }}-${{ github.repository }}-${{ matrix.flavor }}
      cancel-in-progress: true
    runs-on: macos-10.15
    needs: iso
    strategy:
      matrix:
        include:
          - flavor: "opensuse"
    #            - flavor: "fedora"
    steps:
      - uses: actions/checkout@v2
      - name: Download ISO
        uses: actions/download-artifact@v2
        with:
          name: cOS-${{ matrix.flavor }}.iso.zip

      # - name: Install deps
      #   run: |
      #     brew tap hashicorp/tap
      #     brew install hashicorp/tap/packer
      - name: Build VBox Image ðŸ”§
        run: |
          PACKER_ARGS="-var='feature=vagrant' -only virtualbox-iso" make packer
      - uses: actions/upload-artifact@v2
        with:
          name: cOS-${{ matrix.flavor }}.ova
          path: |
            packer/*.tar.gz
          if-no-files-found: error
      - uses: actions/upload-artifact@v2
        with:
          name: cOS-${{ matrix.flavor }}-vbox.box
          path: |
            packer/*.box
          if-no-files-found: error
  tests:
    concurrency: 
      group: ci-dismissable-${{ github.head_ref || github.ref }}-${{ github.repository }}-${{ matrix.flavor }}
      cancel-in-progress: true
    runs-on: macos-10.15
    needs: vbox
    strategy:
      matrix:
        flavor: ["opensuse"]
        test: ["test-features", "test-smoke", "test-fallback", "test-recovery", "test-upgrades-images-signed", "test-upgrades-images-unsigned"]
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
      - uses: actions/checkout@v2
      - name: Download vagrant box
        uses: actions/download-artifact@v2
        with:
          name: cOS-${{ matrix.flavor }}-vbox.box
          path: packer

      - name: Run tests ðŸ”§
        run: |
          export GOPATH="/Users/runner/go"
          go get -u github.com/onsi/ginkgo/ginkgo
          go get -u github.com/onsi/gomega/...
          PATH=$PATH:$GOPATH/bin
          make test-clean
          make vagrantfile
          make prepare-test
          make ${{ matrix.test }}
      - uses: actions/upload-artifact@v2
        if: failure() && contains(matrix.test, 'upgrade')
        with:
          name: cOS-${{ matrix.test }}.logs.zip
          path: tests/**/logs/*
          if-no-files-found: warn

  publish:
    concurrency: 
      group: ci-publish-${{ github.head_ref || github.ref }}-${{ github.repository }}-${{ matrix.flavor }}
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' && github.event_name == 'push' && !startsWith(github.ref, 'refs/tags/')
    needs: tests
    strategy:
      matrix:
        include:
          - flavor: "opensuse"
          - flavor: "fedora"
    env:
      FLAVOR: ${{ matrix.flavor }}
    steps:
      - uses: actions/checkout@v2
      - name: Download result for build
        uses: actions/download-artifact@v2
        with:
          name: build-${{ matrix.flavor }}
          path: build
      - run: |
          git fetch --prune --unshallow

      - name: setup-docker
        uses: docker-practice/actions-setup-docker@master

      # We patch docker to use all the HD available in GH action free runners
      - name: Patch Docker Daemon data-root
        run: |
          DOCKER_DATA_ROOT='/mnt/var/lib/docker'
          DOCKER_DAEMON_JSON='/etc/docker/daemon.json'
          sudo mkdir -p "${DOCKER_DATA_ROOT}"
          jq --arg dataroot "${DOCKER_DATA_ROOT}" '. + {"data-root": $dataroot}' "${DOCKER_DAEMON_JSON}" > "/tmp/docker.json.tmp"
          sudo mv "/tmp/docker.json.tmp" "${DOCKER_DAEMON_JSON}"
          sudo systemctl restart docker

      - name: Login to Quay Registry
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        run: echo ${{ secrets.QUAY_PASSWORD }} | docker login -u ${{ secrets.QUAY_USERNAME }} --password-stdin quay.io
      - name: Set Push options
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        run: echo "BUILD_ARGS=--push --only-target-package --pull" >> $GITHUB_ENV

      - name: Install deps
        run: |
          sudo -E make deps

      - name: Publish to DockerHub ðŸš€
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        run: |
          sudo -E make publish-repo

  github-release:
    concurrency: 
      group: ci-publish-${{ github.head_ref || github.ref }}-${{ github.repository }}-${{ matrix.flavor }}
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: tests
    strategy:
      matrix:
        include:
          - flavor: "opensuse"
          - flavor: "fedora"
    steps:
      - uses: actions/checkout@v2
      - name: Download ISO
        uses: actions/download-artifact@v2
        with:
          name: cOS-${{ matrix.flavor }}.iso.zip
          path: release
      - name: Download vagrant box
        uses: actions/download-artifact@v2
        with:
          name: cOS-${{ matrix.flavor }}-vbox.box
          path: release
      - name: Download OVA image
        uses: actions/download-artifact@v2
        with:
          name: cOS-${{ matrix.flavor }}.ova
          path: release
      - name: Download QCOW image
        uses: actions/download-artifact@v2
        with:
          name: cOS-${{ matrix.flavor }}.qcow
          path: release
      - name: Release
        uses: fnkr/github-action-ghr@v1
        if: startsWith(github.ref, 'refs/tags/')
        env:
          GHR_PATH: release/
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


# Non-squashfs tests

  iso-nosquashfs:
    concurrency: 
      group: ci-dismissable-nosquashfs-${{ github.head_ref || github.ref }}-${{ github.repository }}-${{ matrix.flavor }}
      cancel-in-progress: true
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        include:
          - flavor: "opensuse"
    #         - flavor: "fedora"
    #         - flavor: "ubuntu"
    steps:
      - uses: actions/checkout@v2
      - name: Download result for build
        uses: actions/download-artifact@v2
        with:
          name: build-${{ matrix.flavor }}
          path: build
      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y xorriso squashfs-tools
          sudo -E make deps

      - name: Tweak manifest and drop squashfs recovery
        run: |
          yq d -i manifest.yaml 'packages.isoimage(.==recovery/cos-img)'

      - name: Build ISO from local build ðŸ”§
        if: github.event_name != 'schedule' && !startsWith(github.ref, 'refs/tags/')
        run: |
          sudo -E make local-iso

      - name: Build ISO from remote repositories ðŸ”§
        if: github.event_name == 'schedule' || startsWith(github.ref, 'refs/tags/')
        run: |
          sudo -E make iso
      - uses: actions/upload-artifact@v2
        with:
          name: cOS-nosquashfs-${{ matrix.flavor }}.iso.zip
          path: |
            *.iso
            *.sha256
          if-no-files-found: error
  
  vbox-nosquashfs:
    concurrency: 
      group: ci-dismissable-nosquashfs-${{ github.head_ref || github.ref }}-${{ github.repository }}-${{ matrix.flavor }}
      cancel-in-progress: true
    runs-on: macos-10.15
    needs: iso-nosquashfs
    strategy:
      matrix:
        include:
          - flavor: "opensuse"
    #            - flavor: "fedora"
    steps:
      - uses: actions/checkout@v2
      - name: Download ISO
        uses: actions/download-artifact@v2
        with:
          name: cOS-nosquashfs-${{ matrix.flavor }}.iso.zip

      # - name: Install deps
      #   run: |
      #     brew tap hashicorp/tap
      #     brew install hashicorp/tap/packer
      - name: Build VBox Image ðŸ”§
        run: |
          PACKER_ARGS="-var='feature=vagrant' -only virtualbox-iso" make packer
      - uses: actions/upload-artifact@v2
        with:
          name: cOS-nosquashfs-${{ matrix.flavor }}.ova
          path: |
            packer/*.tar.gz
          if-no-files-found: error
      - uses: actions/upload-artifact@v2
        with:
          name: cOS-nosquashfs-${{ matrix.flavor }}-vbox.box
          path: |
            packer/*.box
          if-no-files-found: error
  tests-nosquashfs:
    concurrency: 
      group: ci-dismissable-nosquashfs-${{ github.head_ref || github.ref }}-${{ github.repository }}-${{ matrix.flavor }}
      cancel-in-progress: true
    runs-on: macos-10.15
    needs: vbox-nosquashfs
    strategy:
      matrix:
        flavor: ["opensuse"]
        test: ["test-features", "test-smoke", "test-fallback", "test-recovery", "test-upgrades-images-signed", "test-upgrades-images-unsigned"]
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
      - uses: actions/checkout@v2
      - name: Download vagrant box
        uses: actions/download-artifact@v2
        with:
          name: cOS-nosquashfs-${{ matrix.flavor }}-vbox.box
          path: packer

      - name: Run tests ðŸ”§
        run: |
          export GOPATH="/Users/runner/go"
          go get -u github.com/onsi/ginkgo/ginkgo
          go get -u github.com/onsi/gomega/...
          PATH=$PATH:$GOPATH/bin
          make test-clean
          make vagrantfile
          make prepare-test
          make ${{ matrix.test }}
      - uses: actions/upload-artifact@v2
        if: failure() && contains(matrix.test, 'upgrade')
        with:
          name: cOS-${{ matrix.test }}.logs.zip
          path: tests/**/logs/*
          if-no-files-found: warn