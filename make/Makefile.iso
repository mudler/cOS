#
# cOS-toolkit Makefile.iso
#
#

REPO_CACHE?=raccos/$(FLAVOR)

ISO?=$(ROOT_DIR)/$(shell ls *.iso)

PACKER_ARGS?=

export REPO_CACHE
ifneq ($(strip $(REPO_CACHE)),)
	BUILD_ARGS+=--image-repository $(REPO_CACHE)
endif

MKSQUASHFS?=$(shell which mksquashfs 2> /dev/null)
ifeq ("$(MKSQUASHFS)","")
MKSQUASHFS="/usr/bin/mksquashfs"
endif

#
# remove iso artifacts
#

clean_iso:
	rm -rf $(ROOT_DIR)/*.iso
	sudo rm -rf isowork

$(DESTINATION):
	mkdir $(DESTINATION)

#
# build ISO from repository
#

$(MKSQUASHFS):
	@echo "'mksquashfs' not found, install 'squashfs' package."
	@exit 1

create-repo: luet
	@echo ">$(MKSQUASHFS)<"
	$(LUET) create-repo --tree "$(TREE)" \
    --output $(DESTINATION) \
    --packages $(DESTINATION) \
    --name "cOS" \
    --descr "cOS $(FLAVOR)" \
    --urls "" \
    --tree-compression $(COMPRESSION) \
    --tree-filename tree.tar \
    --meta-compression $(COMPRESSION) \
    --type http

local-iso: $(MKSQUASHFS) create-repo
	$(LUET) makeiso -- $(ISO_SPEC) --local $(DESTINATION)

iso: $(MKSQUASHFS)
	cp -rf $(ISO_SPEC) $(ISO_SPEC).remote
	yq w -i $(ISO_SPEC).remote 'luet.repositories[0].name' 'cOS'
	yq w -i $(ISO_SPEC).remote 'luet.repositories[0].enable' true
	yq w -i $(ISO_SPEC).remote 'luet.repositories[0].type' 'docker'
	yq w -i $(ISO_SPEC).remote 'luet.repositories[0].urls[0]' $(FINAL_REPO)
	$(LUET) makeiso $(ISO_SPEC).remote

# Packer

.PHONY: packer
packer:
	cd $(ROOT_DIR)/packer && packer build -var "iso=$(ISO)" $(PACKER_ARGS) images.json
